// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/24/2021 01:43:25"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ShiftLeft2B
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ShiftLeft2B_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] Data_0;
// wires                                               
wire [31:0] Data_out;

// assign statements (if any)                          
ShiftLeft2B i1 (
// port map - connection between master ports and signals/registers   
	.Data_0(Data_0),
	.Data_out(Data_out)
);
initial 
begin 
#1000000 $finish;
end 
// Data_0[ 31 ]
initial
begin
	Data_0[31] = 1'b0;
end 
// Data_0[ 30 ]
initial
begin
	Data_0[30] = 1'b0;
end 
// Data_0[ 29 ]
initial
begin
	Data_0[29] = 1'b0;
end 
// Data_0[ 28 ]
initial
begin
	Data_0[28] = 1'b0;
end 
// Data_0[ 27 ]
initial
begin
	Data_0[27] = 1'b0;
end 
// Data_0[ 26 ]
initial
begin
	Data_0[26] = 1'b0;
end 
// Data_0[ 25 ]
initial
begin
	Data_0[25] = 1'b0;
end 
// Data_0[ 24 ]
initial
begin
	Data_0[24] = 1'b0;
end 
// Data_0[ 23 ]
initial
begin
	Data_0[23] = 1'b0;
end 
// Data_0[ 22 ]
initial
begin
	Data_0[22] = 1'b0;
end 
// Data_0[ 21 ]
initial
begin
	Data_0[21] = 1'b0;
end 
// Data_0[ 20 ]
initial
begin
	Data_0[20] = 1'b0;
end 
// Data_0[ 19 ]
initial
begin
	Data_0[19] = 1'b0;
end 
// Data_0[ 18 ]
initial
begin
	Data_0[18] = 1'b0;
end 
// Data_0[ 17 ]
initial
begin
	Data_0[17] = 1'b0;
end 
// Data_0[ 16 ]
initial
begin
	Data_0[16] = 1'b0;
end 
// Data_0[ 15 ]
initial
begin
	Data_0[15] = 1'b0;
end 
// Data_0[ 14 ]
initial
begin
	Data_0[14] = 1'b0;
end 
// Data_0[ 13 ]
initial
begin
	Data_0[13] = 1'b0;
end 
// Data_0[ 12 ]
initial
begin
	Data_0[12] = 1'b0;
end 
// Data_0[ 11 ]
initial
begin
	Data_0[11] = 1'b0;
end 
// Data_0[ 10 ]
initial
begin
	Data_0[10] = 1'b0;
end 
// Data_0[ 9 ]
initial
begin
	Data_0[9] = 1'b0;
end 
// Data_0[ 8 ]
initial
begin
	Data_0[8] = 1'b0;
end 
// Data_0[ 7 ]
initial
begin
	Data_0[7] = 1'b0;
end 
// Data_0[ 6 ]
initial
begin
	Data_0[6] = 1'b0;
end 
// Data_0[ 5 ]
initial
begin
	Data_0[5] = 1'b0;
end 
// Data_0[ 4 ]
initial
begin
	Data_0[4] = 1'b0;
end 
// Data_0[ 3 ]
initial
begin
	Data_0[3] = 1'b0;
end 
// Data_0[ 2 ]
initial
begin
	Data_0[2] = 1'b0;
end 
// Data_0[ 1 ]
initial
begin
	Data_0[1] = 1'b0;
end 
// Data_0[ 0 ]
initial
begin
	Data_0[0] = 1'b1;
end 
endmodule

